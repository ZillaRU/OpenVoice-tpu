import os
import torch
import se_extractor
from api import BaseSpeakerTTS, ToneColorConverter
import time

ckpt_base = 'checkpoints/base_speakers/EN'
ckpt_converter = 'checkpoints/converter'
device = 'cpu'
output_dir = 'outputs'

base_speaker_tts = BaseSpeakerTTS(f'{ckpt_base}/config.json', device=device)
base_speaker_tts.load_ckpt(ckpt_base)
tone_color_converter = ToneColorConverter(f'{ckpt_converter}/config.json', device=device)
tone_color_converter.load_ckpt(ckpt_converter)

os.makedirs(output_dir, exist_ok=True)

source_se = torch.load(f'{ckpt_base}/en_default_se.pth').to(device)

reference_speaker = 'resources/example_reference.mp3'
st = time.time()
target_se, audio_name = se_extractor.get_se(reference_speaker, tone_color_converter, target_dir='processed', vad=True)
print(f'******************* get_se time: {time.time() - st}')

save_path = f'{output_dir}/output_en_default.wav'

# Run the base speaker tts
text = "This audio is generated by OpenVoice."
src_path = f'{output_dir}/tmp.wav'
st = time.time()
base_speaker_tts.tts(text, src_path, speaker='default', language='English', speed=1.0)
print(f'******************* tts time: {time.time() - st}')

# Run the tone color converter
encode_message = "@MyShell"
st = time.time()
tone_color_converter.convert(
    audio_src_path=src_path, 
    src_se=source_se, 
    tgt_se=target_se, 
    output_path=save_path,
    message=encode_message)
print(f'******************* convert time: {time.time() - st}')

source_se = torch.load(f'{ckpt_base}/en_style_se.pth').to(device)
save_path = f'{output_dir}/output_whispering1.wav'

# Run the base speaker tts
text = "This audio is generated by OpenVoice with a half-performance model."
src_path = f'{output_dir}/tmp.wav'
st = time.time()
base_speaker_tts.tts(text, src_path, speaker='whispering', language='English', speed=0.9)
print(f'******************* tts time: {time.time() - st}')

# Run the tone color converter
encode_message = "@MyShell"
st = time.time()
tone_color_converter.convert(
    audio_src_path=src_path, 
    src_se=source_se, 
    tgt_se=target_se, 
    output_path=save_path,
    message=encode_message)
print(f'******************* convert time: {time.time() - st}')

ckpt_base = 'checkpoints/base_speakers/ZH'
base_speaker_tts = BaseSpeakerTTS(f'{ckpt_base}/config.json', device=device)
base_speaker_tts.load_ckpt(ckpt_base)

source_se = torch.load(f'{ckpt_base}/zh_default_se.pth').to(device)
save_path = f'{output_dir}/output_chinese.wav'

# Run the base speaker tts
text = "今天天气真好，我们一起出去吃饭吧。"
src_path = f'{output_dir}/tmp.wav'
st = time.time()
base_speaker_tts.tts(text, src_path, speaker='default', language='Chinese', speed=1.0)
print(f'******************* tts time: {time.time() - st}')

# Run the tone color converter
encode_message = "@MyShell"
st = time.time()
tone_color_converter.convert(
    audio_src_path=src_path, 
    src_se=source_se, 
    tgt_se=target_se, 
    output_path=save_path,
    message=encode_message)
print(f'******************* convert time: {time.time() - st}')